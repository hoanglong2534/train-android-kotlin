package com.btvn.btv290925;

import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import java.util.List;

public class bai4 extends AppCompatActivity implements BookAdapter.OnBookActionListener {

    private EditText edtTitle, edtAuthor, edtYear;
    private Button btnAdd, btnUpdate, btnClear, btnViewProvider;
    private ListView listViewBooks;
    
    private BookManager bookManager;
    private BookAdapter bookAdapter;
    private List<Book> bookList;
    private Book selectedBook = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_bai4);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // Kh·ªüi t·∫°o c√°c view
        initViews();
        
        // Kh·ªüi t·∫°o BookManager
        bookManager = new BookManager(this);
        
        // Load d·ªØ li·ªáu v√† setup ListView
        loadBooks();
        setupListView();
        
        // Set click listeners
        setupClickListeners();
    }

    private void initViews() {
        edtTitle = findViewById(R.id.edtTitle);
        edtAuthor = findViewById(R.id.edtAuthor);
        edtYear = findViewById(R.id.edtYear);
        btnAdd = findViewById(R.id.btnAdd);
        btnUpdate = findViewById(R.id.btnUpdate);
        btnClear = findViewById(R.id.btnClear);
        btnViewProvider = findViewById(R.id.btnViewProvider);
        listViewBooks = findViewById(R.id.listViewBooks);
    }

    private void setupListView() {
        bookAdapter = new BookAdapter(this, bookList);
        bookAdapter.setOnBookActionListener(this);
        listViewBooks.setAdapter(bookAdapter);
    }

    private void setupClickListeners() {
        btnAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addBook();
            }
        });

        btnUpdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                updateBook();
            }
        });

        btnClear.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clearForm();
            }
        });

        btnViewProvider.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showProviderInfo();
            }
        });
    }

    private void addBook() {
        String title = edtTitle.getText().toString().trim();
        String author = edtAuthor.getText().toString().trim();
        String yearStr = edtYear.getText().toString().trim();

        if (title.isEmpty() || author.isEmpty() || yearStr.isEmpty()) {
            Toast.makeText(this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int year = Integer.parseInt(yearStr);
            if (year < 1000 || year > 3000) {
                Toast.makeText(this, "NƒÉm xu·∫•t b·∫£n ph·∫£i t·ª´ 1000 ƒë·∫øn 3000!", Toast.LENGTH_SHORT).show();
                return;
            }

            Book book = new Book(title, author, year);
            Uri result = bookManager.addBook(book);

            if (result != null) {
                Toast.makeText(this, "Th√™m s√°ch th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                clearForm();
                loadBooks();
            } else {
                Toast.makeText(this, "L·ªói khi th√™m s√°ch!", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "NƒÉm xu·∫•t b·∫£n ph·∫£i l√† s·ªë!", Toast.LENGTH_SHORT).show();
        }
    }

    private void updateBook() {
        if (selectedBook == null) {
            Toast.makeText(this, "Vui l√≤ng ch·ªçn s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t!", Toast.LENGTH_SHORT).show();
            return;
        }

        String title = edtTitle.getText().toString().trim();
        String author = edtAuthor.getText().toString().trim();
        String yearStr = edtYear.getText().toString().trim();

        if (title.isEmpty() || author.isEmpty() || yearStr.isEmpty()) {
            Toast.makeText(this, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            int year = Integer.parseInt(yearStr);
            if (year < 1000 || year > 3000) {
                Toast.makeText(this, "NƒÉm xu·∫•t b·∫£n ph·∫£i t·ª´ 1000 ƒë·∫øn 3000!", Toast.LENGTH_SHORT).show();
                return;
            }

            selectedBook.setTitle(title);
            selectedBook.setAuthor(author);
            selectedBook.setYear(year);

            int result = bookManager.updateBook(selectedBook);

            if (result > 0) {
                Toast.makeText(this, "C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                clearForm();
                loadBooks();
            } else {
                Toast.makeText(this, "L·ªói khi c·∫≠p nh·∫≠t s√°ch!", Toast.LENGTH_SHORT).show();
            }
        } catch (NumberFormatException e) {
            Toast.makeText(this, "NƒÉm xu·∫•t b·∫£n ph·∫£i l√† s·ªë!", Toast.LENGTH_SHORT).show();
        }
    }

    private void clearForm() {
        edtTitle.setText("");
        edtAuthor.setText("");
        edtYear.setText("");
        selectedBook = null;
        btnUpdate.setEnabled(false);
    }

    private void loadBooks() {
        bookList = bookManager.getAllBooks();
        if (bookAdapter != null) {
            bookAdapter.updateList(bookList);
        }
    }

    private void showProviderInfo() {
        int totalBooks = bookManager.getBookCount();
        
        StringBuilder providerInfo = new StringBuilder();
        providerInfo.append("üìö TH√îNG TIN CONTENT PROVIDER\n\n");
        providerInfo.append("üîó Authority: ").append(BookProvider.AUTHORITY).append("\n");
        providerInfo.append("üìÅ Database: ").append("BookProvider.db").append("\n");
        providerInfo.append("üìã B·∫£ng: books\n");
        providerInfo.append("üìñ T·ªïng s·ªë s√°ch: ").append(totalBooks).append("\n\n");
        providerInfo.append("üåê URI: ").append(BookProvider.CONTENT_URI.toString()).append("\n\n");
        
        if (totalBooks > 0) {
            providerInfo.append("üìù DANH S√ÅCH S√ÅCH:\n");
            providerInfo.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");
            
            for (Book book : bookList) {
                providerInfo.append("üÜî ID: ").append(book.getId()).append("\n");
                providerInfo.append("üìñ T√™n: ").append(book.getTitle()).append("\n");
                providerInfo.append("‚úçÔ∏è T√°c gi·∫£: ").append(book.getAuthor()).append("\n");
                providerInfo.append("üìÖ NƒÉm: ").append(book.getYear()).append("\n");
                providerInfo.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n");
            }
        } else {
            providerInfo.append("üì≠ Ch∆∞a c√≥ s√°ch n√†o trong database");
        }
        
        new AlertDialog.Builder(this)
                .setTitle("Content Provider Info")
                .setMessage(providerInfo.toString())
                .setPositiveButton("OK", null)
                .show();
    }

    // Implement OnBookActionListener
    @Override
    public void onEditBook(Book book) {
        selectedBook = book;
        edtTitle.setText(book.getTitle());
        edtAuthor.setText(book.getAuthor());
        edtYear.setText(String.valueOf(book.getYear()));
        btnUpdate.setEnabled(true);
        Toast.makeText(this, "ƒê√£ ch·ªçn s√°ch ƒë·ªÉ ch·ªânh s·ª≠a", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onDeleteBook(int bookId) {
        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n x√≥a")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s√°ch n√†y?")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    int result = bookManager.deleteBook(bookId);
                    if (result > 0) {
                        Toast.makeText(this, "ƒê√£ x√≥a s√°ch!", Toast.LENGTH_SHORT).show();
                        loadBooks();
                        if (selectedBook != null && selectedBook.getId() == bookId) {
                            clearForm();
                        }
                    } else {
                        Toast.makeText(this, "L·ªói khi x√≥a s√°ch!", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    @Override
    public void onRefreshList() {
        loadBooks();
    }
}